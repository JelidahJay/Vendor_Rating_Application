// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurveyBanckend.Infrastructure;

#nullable disable

namespace SurveyBanckend.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250426123519_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Department", b =>
                {
                    b.Property<int>("department_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("department_id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("department_id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Option", b =>
                {
                    b.Property<int>("option_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("option_id"));

                    b.Property<string>("option_text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("option_id");

                    b.ToTable("options");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.QuestionOption", b =>
                {
                    b.Property<int>("question_option_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("question_option_id"));

                    b.Property<int>("option_id")
                        .HasColumnType("integer");

                    b.Property<int?>("option_id1")
                        .HasColumnType("integer");

                    b.Property<int>("question_id")
                        .HasColumnType("integer");

                    b.Property<int?>("question_id1")
                        .HasColumnType("integer");

                    b.HasKey("question_option_id");

                    b.HasIndex("option_id1");

                    b.HasIndex("question_id1");

                    b.ToTable("question_options");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.QuestionType", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("type_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("question_types");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Questions", b =>
                {
                    b.Property<int>("question_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("question_id"));

                    b.Property<bool>("is_required")
                        .HasColumnType("boolean");

                    b.Property<int>("question_order")
                        .HasColumnType("integer");

                    b.Property<string>("question_text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("question_type_id")
                        .HasColumnType("integer");

                    b.Property<int?>("question_typeid")
                        .HasColumnType("integer");

                    b.HasKey("question_id");

                    b.HasIndex("question_typeid");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Survey", b =>
                {
                    b.Property<int>("survey_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("survey_id"));

                    b.Property<int>("invited_by_user_id")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("submitted_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("user_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("valid_until")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("vendor_id")
                        .HasColumnType("integer");

                    b.HasKey("survey_id");

                    b.HasIndex("invited_by_user_id");

                    b.HasIndex("user_id");

                    b.HasIndex("vendor_id");

                    b.ToTable("surveys");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.SurveyResponse", b =>
                {
                    b.Property<int>("response_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("response_id"));

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("question_id")
                        .HasColumnType("integer");

                    b.Property<int>("survey_id")
                        .HasColumnType("integer");

                    b.HasKey("response_id");

                    b.HasIndex("question_id");

                    b.HasIndex("survey_id");

                    b.ToTable("survey_responses");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("user_id"));

                    b.Property<int>("department_id")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("user_id");

                    b.HasIndex("department_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Vendor", b =>
                {
                    b.Property<int>("vendor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("vendor_id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("product_service")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("vendor_id");

                    b.ToTable("vendors");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.QuestionOption", b =>
                {
                    b.HasOne("SurveyBackend.Domain.Entities.Option", "option")
                        .WithMany("question_options")
                        .HasForeignKey("option_id1");

                    b.HasOne("SurveyBackend.Domain.Entities.Questions", "question")
                        .WithMany("options")
                        .HasForeignKey("question_id1");

                    b.Navigation("option");

                    b.Navigation("question");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Questions", b =>
                {
                    b.HasOne("SurveyBackend.Domain.Entities.QuestionType", "question_type")
                        .WithMany("questions")
                        .HasForeignKey("question_typeid");

                    b.Navigation("question_type");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Survey", b =>
                {
                    b.HasOne("SurveyBackend.Domain.Entities.User", "invited_by")
                        .WithMany("surveys_invited")
                        .HasForeignKey("invited_by_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyBackend.Domain.Entities.User", "user")
                        .WithMany("surveys_rated")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyBackend.Domain.Entities.Vendor", "vendor")
                        .WithMany("surveys")
                        .HasForeignKey("vendor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invited_by");

                    b.Navigation("user");

                    b.Navigation("vendor");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.SurveyResponse", b =>
                {
                    b.HasOne("SurveyBackend.Domain.Entities.Questions", "question")
                        .WithMany()
                        .HasForeignKey("question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyBackend.Domain.Entities.Survey", "survey")
                        .WithMany("responses")
                        .HasForeignKey("survey_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("question");

                    b.Navigation("survey");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.User", b =>
                {
                    b.HasOne("SurveyBackend.Domain.Entities.Department", "department")
                        .WithMany("users")
                        .HasForeignKey("department_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Department", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Option", b =>
                {
                    b.Navigation("question_options");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.QuestionType", b =>
                {
                    b.Navigation("questions");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Questions", b =>
                {
                    b.Navigation("options");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Survey", b =>
                {
                    b.Navigation("responses");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.User", b =>
                {
                    b.Navigation("surveys_invited");

                    b.Navigation("surveys_rated");
                });

            modelBuilder.Entity("SurveyBackend.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
